/**
 * KORONA.cloud API v3
 * Our api provides access to our cloud services
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KoronacloudApiV3);
  }
}(this, function(expect, KoronacloudApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KoronacloudApiV3.Receipt();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Receipt', function() {
    it('should create an instance of Receipt', function() {
      // uncomment below and update the code to test Receipt
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be.a(KoronacloudApiV3.Receipt);
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property _number (base name: "number")', function() {
      // uncomment below and update the code to test the property _number
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property revision (base name: "revision")', function() {
      // uncomment below and update the code to test the property revision
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property accountTransactions (base name: "accountTransactions")', function() {
      // uncomment below and update the code to test the property accountTransactions
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property bookingTime (base name: "bookingTime")', function() {
      // uncomment below and update the code to test the property bookingTime
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property cashier (base name: "cashier")', function() {
      // uncomment below and update the code to test the property cashier
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "creationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property customer (base name: "customer")', function() {
      // uncomment below and update the code to test the property customer
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property customerGroup (base name: "customerGroup")', function() {
      // uncomment below and update the code to test the property customerGroup
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property customerOrder (base name: "customerOrder")', function() {
      // uncomment below and update the code to test the property customerOrder
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property depositAmount (base name: "depositAmount")', function() {
      // uncomment below and update the code to test the property depositAmount
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property geoLocation (base name: "geoLocation")', function() {
      // uncomment below and update the code to test the property geoLocation
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property organizationalUnit (base name: "organizationalUnit")', function() {
      // uncomment below and update the code to test the property organizationalUnit
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property payments (base name: "payments")', function() {
      // uncomment below and update the code to test the property payments
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property pointOfSale (base name: "pointOfSale")', function() {
      // uncomment below and update the code to test the property pointOfSale
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property priceGroup (base name: "priceGroup")', function() {
      // uncomment below and update the code to test the property priceGroup
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property voided (base name: "voided")', function() {
      // uncomment below and update the code to test the property voided
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

    it('should have the property zcounter (base name: "zcounter")', function() {
      // uncomment below and update the code to test the property zcounter
      //var instane = new KoronacloudApiV3.Receipt();
      //expect(instance).to.be();
    });

  });

}));
