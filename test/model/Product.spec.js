/**
 * KORONA.cloud API v3
 * Our api provides access to our cloud services
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KoronacloudApiV3);
  }
}(this, function(expect, KoronacloudApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KoronacloudApiV3.Product();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Product', function() {
    it('should create an instance of Product', function() {
      // uncomment below and update the code to test Product
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be.a(KoronacloudApiV3.Product);
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property _number (base name: "number")', function() {
      // uncomment below and update the code to test the property _number
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property revision (base name: "revision")', function() {
      // uncomment below and update the code to test the property revision
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property alternativeSector (base name: "alternativeSector")', function() {
      // uncomment below and update the code to test the property alternativeSector
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property assortment (base name: "assortment")', function() {
      // uncomment below and update the code to test the property assortment
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property codes (base name: "codes")', function() {
      // uncomment below and update the code to test the property codes
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property commodityGroup (base name: "commodityGroup")', function() {
      // uncomment below and update the code to test the property commodityGroup
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property conversion (base name: "conversion")', function() {
      // uncomment below and update the code to test the property conversion
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property costs (base name: "costs")', function() {
      // uncomment below and update the code to test the property costs
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property deactivated (base name: "deactivated")', function() {
      // uncomment below and update the code to test the property deactivated
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property deposit (base name: "deposit")', function() {
      // uncomment below and update the code to test the property deposit
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property descriptions (base name: "descriptions")', function() {
      // uncomment below and update the code to test the property descriptions
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property discountable (base name: "discountable")', function() {
      // uncomment below and update the code to test the property discountable
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property infoTexts (base name: "infoTexts")', function() {
      // uncomment below and update the code to test the property infoTexts
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property itemSequence (base name: "itemSequence")', function() {
      // uncomment below and update the code to test the property itemSequence
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property lastPurchasePrice (base name: "lastPurchasePrice")', function() {
      // uncomment below and update the code to test the property lastPurchasePrice
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property listed (base name: "listed")', function() {
      // uncomment below and update the code to test the property listed
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property listedSince (base name: "listedSince")', function() {
      // uncomment below and update the code to test the property listedSince
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property maxPrice (base name: "maxPrice")', function() {
      // uncomment below and update the code to test the property maxPrice
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property minPrice (base name: "minPrice")', function() {
      // uncomment below and update the code to test the property minPrice
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property packagingQuantity (base name: "packagingQuantity")', function() {
      // uncomment below and update the code to test the property packagingQuantity
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property packagingRequired (base name: "packagingRequired")', function() {
      // uncomment below and update the code to test the property packagingRequired
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property packagingUnit (base name: "packagingUnit")', function() {
      // uncomment below and update the code to test the property packagingUnit
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property personalizationRequired (base name: "personalizationRequired")', function() {
      // uncomment below and update the code to test the property personalizationRequired
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property priceChangable (base name: "priceChangable")', function() {
      // uncomment below and update the code to test the property priceChangable
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property prices (base name: "prices")', function() {
      // uncomment below and update the code to test the property prices
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property printTicketsSeparately (base name: "printTicketsSeparately")', function() {
      // uncomment below and update the code to test the property printTicketsSeparately
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property productionType (base name: "productionType")', function() {
      // uncomment below and update the code to test the property productionType
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property recommendedRetailPrice (base name: "recommendedRetailPrice")', function() {
      // uncomment below and update the code to test the property recommendedRetailPrice
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property relatedProducts (base name: "relatedProducts")', function() {
      // uncomment below and update the code to test the property relatedProducts
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property sector (base name: "sector")', function() {
      // uncomment below and update the code to test the property sector
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property serialNumberRequired (base name: "serialNumberRequired")', function() {
      // uncomment below and update the code to test the property serialNumberRequired
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property subproductPresentation (base name: "subproductPresentation")', function() {
      // uncomment below and update the code to test the property subproductPresentation
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property subproducts (base name: "subproducts")', function() {
      // uncomment below and update the code to test the property subproducts
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property supplierPrices (base name: "supplierPrices")', function() {
      // uncomment below and update the code to test the property supplierPrices
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property ticketDefinition (base name: "ticketDefinition")', function() {
      // uncomment below and update the code to test the property ticketDefinition
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property trackInventory (base name: "trackInventory")', function() {
      // uncomment below and update the code to test the property trackInventory
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

    it('should have the property stockReturnUnsellable (base name: "stockReturnUnsellable")', function() {
      // uncomment below and update the code to test the property stockReturnUnsellable
      //var instane = new KoronacloudApiV3.Product();
      //expect(instance).to.be();
    });

  });

}));
