/**
 * KORONA.cloud API v3
 * Our api provides access to our cloud services
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KoronacloudApiV3);
  }
}(this, function(expect, KoronacloudApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KoronacloudApiV3.Inventory();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Inventory', function() {
    it('should create an instance of Inventory', function() {
      // uncomment below and update the code to test Inventory
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be.a(KoronacloudApiV3.Inventory);
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property _number (base name: "number")', function() {
      // uncomment below and update the code to test the property _number
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property revision (base name: "revision")', function() {
      // uncomment below and update the code to test the property revision
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property automaticBooking (base name: "automaticBooking")', function() {
      // uncomment below and update the code to test the property automaticBooking
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property automaticBookingAfterDays (base name: "automaticBookingAfterDays")', function() {
      // uncomment below and update the code to test the property automaticBookingAfterDays
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property checkProductAssortmentValidity (base name: "checkProductAssortmentValidity")', function() {
      // uncomment below and update the code to test the property checkProductAssortmentValidity
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property checkProductListing (base name: "checkProductListing")', function() {
      // uncomment below and update the code to test the property checkProductListing
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property executionDays (base name: "executionDays")', function() {
      // uncomment below and update the code to test the property executionDays
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property executionTime (base name: "executionTime")', function() {
      // uncomment below and update the code to test the property executionTime
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property hasBookedReceipts (base name: "hasBookedReceipts")', function() {
      // uncomment below and update the code to test the property hasBookedReceipts
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property maxProductsPerList (base name: "maxProductsPerList")', function() {
      // uncomment below and update the code to test the property maxProductsPerList
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property oneCommodityGroupPerInventoryList (base name: "oneCommodityGroupPerInventoryList")', function() {
      // uncomment below and update the code to test the property oneCommodityGroupPerInventoryList
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property onlyNegativeProductStocks (base name: "onlyNegativeProductStocks")', function() {
      // uncomment below and update the code to test the property onlyNegativeProductStocks
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property organizationalUnits (base name: "organizationalUnits")', function() {
      // uncomment below and update the code to test the property organizationalUnits
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property productFilter (base name: "productFilter")', function() {
      // uncomment below and update the code to test the property productFilter
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new KoronacloudApiV3.Inventory();
      //expect(instance).to.be();
    });

  });

}));
