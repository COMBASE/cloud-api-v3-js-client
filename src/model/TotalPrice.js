/**
 * KORONA.cloud API v3
 * Our api provides access to our cloud services
 *
 * OpenAPI spec version: 3
 * Contact: support@combase.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TaxPayment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./TaxPayment'));
  } else {
    // Browser globals (root is window)
    if (!root.KoronacloudApiV3) {
      root.KoronacloudApiV3 = {};
    }
    root.KoronacloudApiV3.TotalPrice = factory(root.KoronacloudApiV3.ApiClient, root.KoronacloudApiV3.TaxPayment);
  }
}(this, function(ApiClient, TaxPayment) {
  'use strict';




  /**
   * The TotalPrice model module.
   * @module model/TotalPrice
   * @version 3
   */

  /**
   * Constructs a new <code>TotalPrice</code>.
   * Contains all price-related information
   * @alias module:model/TotalPrice
   * @class
   * @param base {Number} base price: price of the receipt or itemrow, excluded not included taxes, included discount. example: 19% tax included, 2€ discount included
   * @param taxPayments {Array.<module:model/TaxPayment>} taxPayments: detailed tax information. could also be used to calculate the gross and net price depending on the base price
   */
  var exports = function(base, taxPayments) {
    var _this = this;

    _this['base'] = base;



    _this['taxPayments'] = taxPayments;
  };

  /**
   * Constructs a <code>TotalPrice</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TotalPrice} obj Optional instance to populate.
   * @return {module:model/TotalPrice} The populated <code>TotalPrice</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('base')) {
        obj['base'] = ApiClient.convertToType(data['base'], 'Number');
      }
      if (data.hasOwnProperty('discount')) {
        obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
      }
      if (data.hasOwnProperty('gross')) {
        obj['gross'] = ApiClient.convertToType(data['gross'], 'Number');
      }
      if (data.hasOwnProperty('net')) {
        obj['net'] = ApiClient.convertToType(data['net'], 'Number');
      }
      if (data.hasOwnProperty('taxPayments')) {
        obj['taxPayments'] = ApiClient.convertToType(data['taxPayments'], [TaxPayment]);
      }
    }
    return obj;
  }

  /**
   * base price: price of the receipt or itemrow, excluded not included taxes, included discount. example: 19% tax included, 2€ discount included
   * @member {Number} base
   */
  exports.prototype['base'] = undefined;
  /**
   * discount: discount amount of the receipt or item row. base + discount = undiscounted base price.
   * @member {Number} discount
   */
  exports.prototype['discount'] = undefined;
  /**
   * gross price: base + not includes taxes. example: 19% tax included, 7% tax excluded
   * @member {Number} gross
   */
  exports.prototype['gross'] = undefined;
  /**
   * base price: price of the receipt or itemrow, excluded all taxes. example: every taxes excluded
   * @member {Number} net
   */
  exports.prototype['net'] = undefined;
  /**
   * taxPayments: detailed tax information. could also be used to calculate the gross and net price depending on the base price
   * @member {Array.<module:model/TaxPayment>} taxPayments
   */
  exports.prototype['taxPayments'] = undefined;



  return exports;
}));


