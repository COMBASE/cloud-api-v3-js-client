/**
 * KORONA.cloud API v3
 * Our api provides access to our cloud services
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountTransaction', 'model/AdditionalInfo', 'model/GeoLocation', 'model/ModelReference', 'model/Payment', 'model/ReceiptItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccountTransaction'), require('./AdditionalInfo'), require('./GeoLocation'), require('./ModelReference'), require('./Payment'), require('./ReceiptItem'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudApiV3JsClient) {
      root.CloudApiV3JsClient = {};
    }
    root.CloudApiV3JsClient.Receipt = factory(root.CloudApiV3JsClient.ApiClient, root.CloudApiV3JsClient.AccountTransaction, root.CloudApiV3JsClient.AdditionalInfo, root.CloudApiV3JsClient.GeoLocation, root.CloudApiV3JsClient.ModelReference, root.CloudApiV3JsClient.Payment, root.CloudApiV3JsClient.ReceiptItem);
  }
}(this, function(ApiClient, AccountTransaction, AdditionalInfo, GeoLocation, ModelReference, Payment, ReceiptItem) {
  'use strict';




  /**
   * The Receipt model module.
   * @module model/Receipt
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>Receipt</code>.
   * @alias module:model/Receipt
   * @class
   */
  var exports = function() {
    var _this = this;























  };

  /**
   * Constructs a <code>Receipt</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Receipt} obj Optional instance to populate.
   * @return {module:model/Receipt} The populated <code>Receipt</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('active')) {
        obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('number')) {
        obj['number'] = ApiClient.convertToType(data['number'], 'String');
      }
      if (data.hasOwnProperty('revision')) {
        obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
      }
      if (data.hasOwnProperty('accountTransactions')) {
        obj['accountTransactions'] = ApiClient.convertToType(data['accountTransactions'], [AccountTransaction]);
      }
      if (data.hasOwnProperty('additionalInfo')) {
        obj['additionalInfo'] = ApiClient.convertToType(data['additionalInfo'], [AdditionalInfo]);
      }
      if (data.hasOwnProperty('bookingTime')) {
        obj['bookingTime'] = ApiClient.convertToType(data['bookingTime'], 'Date');
      }
      if (data.hasOwnProperty('cashier')) {
        obj['cashier'] = ModelReference.constructFromObject(data['cashier']);
      }
      if (data.hasOwnProperty('creationTime')) {
        obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ModelReference.constructFromObject(data['currency']);
      }
      if (data.hasOwnProperty('customer')) {
        obj['customer'] = ModelReference.constructFromObject(data['customer']);
      }
      if (data.hasOwnProperty('customerGroup')) {
        obj['customerGroup'] = ModelReference.constructFromObject(data['customerGroup']);
      }
      if (data.hasOwnProperty('customerOrder')) {
        obj['customerOrder'] = ModelReference.constructFromObject(data['customerOrder']);
      }
      if (data.hasOwnProperty('depositAmount')) {
        obj['depositAmount'] = ApiClient.convertToType(data['depositAmount'], 'Number');
      }
      if (data.hasOwnProperty('geoLocation')) {
        obj['geoLocation'] = GeoLocation.constructFromObject(data['geoLocation']);
      }
      if (data.hasOwnProperty('items')) {
        obj['items'] = ApiClient.convertToType(data['items'], [ReceiptItem]);
      }
      if (data.hasOwnProperty('organizationalUnit')) {
        obj['organizationalUnit'] = ModelReference.constructFromObject(data['organizationalUnit']);
      }
      if (data.hasOwnProperty('payments')) {
        obj['payments'] = ApiClient.convertToType(data['payments'], [Payment]);
      }
      if (data.hasOwnProperty('pointOfSale')) {
        obj['pointOfSale'] = ModelReference.constructFromObject(data['pointOfSale']);
      }
      if (data.hasOwnProperty('priceGroup')) {
        obj['priceGroup'] = ModelReference.constructFromObject(data['priceGroup']);
      }
      if (data.hasOwnProperty('voided')) {
        obj['voided'] = ApiClient.convertToType(data['voided'], 'Boolean');
      }
      if (data.hasOwnProperty('zcounter')) {
        obj['zcounter'] = ApiClient.convertToType(data['zcounter'], 'Number');
      }
    }
    return obj;
  }

  /**
   * indicates whether the object is active for use or not
   * @member {Boolean} active
   */
  exports.prototype['active'] = undefined;
  /**
   * global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * number of the object, like it is set in backoffice; will be removed when active=false
   * @member {String} number
   */
  exports.prototype['number'] = undefined;
  /**
   * the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
   * @member {Number} revision
   */
  exports.prototype['revision'] = undefined;
  /**
   * @member {Array.<module:model/AccountTransaction>} accountTransactions
   */
  exports.prototype['accountTransactions'] = undefined;
  /**
   * @member {Array.<module:model/AdditionalInfo>} additionalInfo
   */
  exports.prototype['additionalInfo'] = undefined;
  /**
   * @member {Date} bookingTime
   */
  exports.prototype['bookingTime'] = undefined;
  /**
   * @member {module:model/ModelReference} cashier
   */
  exports.prototype['cashier'] = undefined;
  /**
   * @member {Date} creationTime
   */
  exports.prototype['creationTime'] = undefined;
  /**
   * @member {module:model/ModelReference} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * @member {module:model/ModelReference} customer
   */
  exports.prototype['customer'] = undefined;
  /**
   * @member {module:model/ModelReference} customerGroup
   */
  exports.prototype['customerGroup'] = undefined;
  /**
   * @member {module:model/ModelReference} customerOrder
   */
  exports.prototype['customerOrder'] = undefined;
  /**
   * @member {Number} depositAmount
   */
  exports.prototype['depositAmount'] = undefined;
  /**
   * @member {module:model/GeoLocation} geoLocation
   */
  exports.prototype['geoLocation'] = undefined;
  /**
   * @member {Array.<module:model/ReceiptItem>} items
   */
  exports.prototype['items'] = undefined;
  /**
   * @member {module:model/ModelReference} organizationalUnit
   */
  exports.prototype['organizationalUnit'] = undefined;
  /**
   * @member {Array.<module:model/Payment>} payments
   */
  exports.prototype['payments'] = undefined;
  /**
   * @member {module:model/ModelReference} pointOfSale
   */
  exports.prototype['pointOfSale'] = undefined;
  /**
   * @member {module:model/ModelReference} priceGroup
   */
  exports.prototype['priceGroup'] = undefined;
  /**
   * @member {Boolean} voided
   */
  exports.prototype['voided'] = undefined;
  /**
   * @member {Number} zcounter
   */
  exports.prototype['zcounter'] = undefined;



  return exports;
}));


