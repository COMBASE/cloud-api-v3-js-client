/**
 * KORONA.cloud API v3
 * Our api provides access to our cloud services
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModelReference', 'model/ProductCode', 'model/ProductDescription', 'model/ProductPrice', 'model/ProductSubproduct', 'model/ProductSupplierPrice'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ModelReference'), require('./ProductCode'), require('./ProductDescription'), require('./ProductPrice'), require('./ProductSubproduct'), require('./ProductSupplierPrice'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudApiV3JsClient) {
      root.CloudApiV3JsClient = {};
    }
    root.CloudApiV3JsClient.Product = factory(root.CloudApiV3JsClient.ApiClient, root.CloudApiV3JsClient.ModelReference, root.CloudApiV3JsClient.ProductCode, root.CloudApiV3JsClient.ProductDescription, root.CloudApiV3JsClient.ProductPrice, root.CloudApiV3JsClient.ProductSubproduct, root.CloudApiV3JsClient.ProductSupplierPrice);
  }
}(this, function(ApiClient, ModelReference, ProductCode, ProductDescription, ProductPrice, ProductSubproduct, ProductSupplierPrice) {
  'use strict';




  /**
   * The Product model module.
   * @module model/Product
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>Product</code>.
   * @alias module:model/Product
   * @class
   */
  var exports = function() {
    var _this = this;











































  };

  /**
   * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Product} obj Optional instance to populate.
   * @return {module:model/Product} The populated <code>Product</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('active')) {
        obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('number')) {
        obj['number'] = ApiClient.convertToType(data['number'], 'String');
      }
      if (data.hasOwnProperty('revision')) {
        obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
      }
      if (data.hasOwnProperty('alternativeSector')) {
        obj['alternativeSector'] = ModelReference.constructFromObject(data['alternativeSector']);
      }
      if (data.hasOwnProperty('assortment')) {
        obj['assortment'] = ModelReference.constructFromObject(data['assortment']);
      }
      if (data.hasOwnProperty('codes')) {
        obj['codes'] = ApiClient.convertToType(data['codes'], [ProductCode]);
      }
      if (data.hasOwnProperty('commodityGroup')) {
        obj['commodityGroup'] = ModelReference.constructFromObject(data['commodityGroup']);
      }
      if (data.hasOwnProperty('conversion')) {
        obj['conversion'] = ApiClient.convertToType(data['conversion'], 'Boolean');
      }
      if (data.hasOwnProperty('costs')) {
        obj['costs'] = ApiClient.convertToType(data['costs'], 'Number');
      }
      if (data.hasOwnProperty('deactivated')) {
        obj['deactivated'] = ApiClient.convertToType(data['deactivated'], 'Boolean');
      }
      if (data.hasOwnProperty('deposit')) {
        obj['deposit'] = ApiClient.convertToType(data['deposit'], 'Boolean');
      }
      if (data.hasOwnProperty('descriptions')) {
        obj['descriptions'] = ApiClient.convertToType(data['descriptions'], [ProductDescription]);
      }
      if (data.hasOwnProperty('discountable')) {
        obj['discountable'] = ApiClient.convertToType(data['discountable'], 'Boolean');
      }
      if (data.hasOwnProperty('image')) {
        obj['image'] = ModelReference.constructFromObject(data['image']);
      }
      if (data.hasOwnProperty('infoTexts')) {
        obj['infoTexts'] = ApiClient.convertToType(data['infoTexts'], [ModelReference]);
      }
      if (data.hasOwnProperty('itemSequence')) {
        obj['itemSequence'] = ModelReference.constructFromObject(data['itemSequence']);
      }
      if (data.hasOwnProperty('lastPurchasePrice')) {
        obj['lastPurchasePrice'] = ApiClient.convertToType(data['lastPurchasePrice'], 'Number');
      }
      if (data.hasOwnProperty('listed')) {
        obj['listed'] = ApiClient.convertToType(data['listed'], 'Boolean');
      }
      if (data.hasOwnProperty('listedSince')) {
        obj['listedSince'] = ApiClient.convertToType(data['listedSince'], 'Date');
      }
      if (data.hasOwnProperty('maxPrice')) {
        obj['maxPrice'] = ApiClient.convertToType(data['maxPrice'], 'Number');
      }
      if (data.hasOwnProperty('minPrice')) {
        obj['minPrice'] = ApiClient.convertToType(data['minPrice'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('packagingQuantity')) {
        obj['packagingQuantity'] = ApiClient.convertToType(data['packagingQuantity'], 'Number');
      }
      if (data.hasOwnProperty('packagingRequired')) {
        obj['packagingRequired'] = ApiClient.convertToType(data['packagingRequired'], 'Boolean');
      }
      if (data.hasOwnProperty('packagingUnit')) {
        obj['packagingUnit'] = ApiClient.convertToType(data['packagingUnit'], 'String');
      }
      if (data.hasOwnProperty('personalizationRequired')) {
        obj['personalizationRequired'] = ApiClient.convertToType(data['personalizationRequired'], 'Boolean');
      }
      if (data.hasOwnProperty('priceChangable')) {
        obj['priceChangable'] = ApiClient.convertToType(data['priceChangable'], 'Boolean');
      }
      if (data.hasOwnProperty('prices')) {
        obj['prices'] = ApiClient.convertToType(data['prices'], [ProductPrice]);
      }
      if (data.hasOwnProperty('printTicketsSeparately')) {
        obj['printTicketsSeparately'] = ApiClient.convertToType(data['printTicketsSeparately'], 'Boolean');
      }
      if (data.hasOwnProperty('productionType')) {
        obj['productionType'] = ModelReference.constructFromObject(data['productionType']);
      }
      if (data.hasOwnProperty('recommendedRetailPrice')) {
        obj['recommendedRetailPrice'] = ApiClient.convertToType(data['recommendedRetailPrice'], 'Number');
      }
      if (data.hasOwnProperty('relatedProducts')) {
        obj['relatedProducts'] = ModelReference.constructFromObject(data['relatedProducts']);
      }
      if (data.hasOwnProperty('sector')) {
        obj['sector'] = ModelReference.constructFromObject(data['sector']);
      }
      if (data.hasOwnProperty('serialNumberRequired')) {
        obj['serialNumberRequired'] = ApiClient.convertToType(data['serialNumberRequired'], 'Boolean');
      }
      if (data.hasOwnProperty('subproductPresentation')) {
        obj['subproductPresentation'] = ApiClient.convertToType(data['subproductPresentation'], 'String');
      }
      if (data.hasOwnProperty('subproducts')) {
        obj['subproducts'] = ApiClient.convertToType(data['subproducts'], [ProductSubproduct]);
      }
      if (data.hasOwnProperty('supplierPrices')) {
        obj['supplierPrices'] = ApiClient.convertToType(data['supplierPrices'], [ProductSupplierPrice]);
      }
      if (data.hasOwnProperty('tags')) {
        obj['tags'] = ApiClient.convertToType(data['tags'], [ModelReference]);
      }
      if (data.hasOwnProperty('ticketDefinition')) {
        obj['ticketDefinition'] = ModelReference.constructFromObject(data['ticketDefinition']);
      }
      if (data.hasOwnProperty('trackInventory')) {
        obj['trackInventory'] = ApiClient.convertToType(data['trackInventory'], 'Boolean');
      }
      if (data.hasOwnProperty('stockReturnUnsellable')) {
        obj['stockReturnUnsellable'] = ApiClient.convertToType(data['stockReturnUnsellable'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * indicates whether the object is active for use or not
   * @member {Boolean} active
   */
  exports.prototype['active'] = undefined;
  /**
   * global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * number of the object, like it is set in backoffice; will be removed when active=false
   * @member {String} number
   */
  exports.prototype['number'] = undefined;
  /**
   * the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
   * @member {Number} revision
   */
  exports.prototype['revision'] = undefined;
  /**
   * @member {module:model/ModelReference} alternativeSector
   */
  exports.prototype['alternativeSector'] = undefined;
  /**
   * @member {module:model/ModelReference} assortment
   */
  exports.prototype['assortment'] = undefined;
  /**
   * @member {Array.<module:model/ProductCode>} codes
   */
  exports.prototype['codes'] = undefined;
  /**
   * @member {module:model/ModelReference} commodityGroup
   */
  exports.prototype['commodityGroup'] = undefined;
  /**
   * @member {Boolean} conversion
   */
  exports.prototype['conversion'] = undefined;
  /**
   * @member {Number} costs
   */
  exports.prototype['costs'] = undefined;
  /**
   * @member {Boolean} deactivated
   */
  exports.prototype['deactivated'] = undefined;
  /**
   * @member {Boolean} deposit
   */
  exports.prototype['deposit'] = undefined;
  /**
   * @member {Array.<module:model/ProductDescription>} descriptions
   */
  exports.prototype['descriptions'] = undefined;
  /**
   * @member {Boolean} discountable
   */
  exports.prototype['discountable'] = undefined;
  /**
   * @member {module:model/ModelReference} image
   */
  exports.prototype['image'] = undefined;
  /**
   * @member {Array.<module:model/ModelReference>} infoTexts
   */
  exports.prototype['infoTexts'] = undefined;
  /**
   * @member {module:model/ModelReference} itemSequence
   */
  exports.prototype['itemSequence'] = undefined;
  /**
   * @member {Number} lastPurchasePrice
   */
  exports.prototype['lastPurchasePrice'] = undefined;
  /**
   * @member {Boolean} listed
   */
  exports.prototype['listed'] = undefined;
  /**
   * @member {Date} listedSince
   */
  exports.prototype['listedSince'] = undefined;
  /**
   * @member {Number} maxPrice
   */
  exports.prototype['maxPrice'] = undefined;
  /**
   * @member {Number} minPrice
   */
  exports.prototype['minPrice'] = undefined;
  /**
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {Number} packagingQuantity
   */
  exports.prototype['packagingQuantity'] = undefined;
  /**
   * @member {Boolean} packagingRequired
   */
  exports.prototype['packagingRequired'] = undefined;
  /**
   * @member {module:model/Product.PackagingUnitEnum} packagingUnit
   */
  exports.prototype['packagingUnit'] = undefined;
  /**
   * @member {Boolean} personalizationRequired
   */
  exports.prototype['personalizationRequired'] = undefined;
  /**
   * @member {Boolean} priceChangable
   */
  exports.prototype['priceChangable'] = undefined;
  /**
   * @member {Array.<module:model/ProductPrice>} prices
   */
  exports.prototype['prices'] = undefined;
  /**
   * @member {Boolean} printTicketsSeparately
   */
  exports.prototype['printTicketsSeparately'] = undefined;
  /**
   * @member {module:model/ModelReference} productionType
   */
  exports.prototype['productionType'] = undefined;
  /**
   * @member {Number} recommendedRetailPrice
   */
  exports.prototype['recommendedRetailPrice'] = undefined;
  /**
   * @member {module:model/ModelReference} relatedProducts
   */
  exports.prototype['relatedProducts'] = undefined;
  /**
   * @member {module:model/ModelReference} sector
   */
  exports.prototype['sector'] = undefined;
  /**
   * @member {Boolean} serialNumberRequired
   */
  exports.prototype['serialNumberRequired'] = undefined;
  /**
   * @member {module:model/Product.SubproductPresentationEnum} subproductPresentation
   */
  exports.prototype['subproductPresentation'] = undefined;
  /**
   * @member {Array.<module:model/ProductSubproduct>} subproducts
   */
  exports.prototype['subproducts'] = undefined;
  /**
   * @member {Array.<module:model/ProductSupplierPrice>} supplierPrices
   */
  exports.prototype['supplierPrices'] = undefined;
  /**
   * @member {Array.<module:model/ModelReference>} tags
   */
  exports.prototype['tags'] = undefined;
  /**
   * @member {module:model/ModelReference} ticketDefinition
   */
  exports.prototype['ticketDefinition'] = undefined;
  /**
   * @member {Boolean} trackInventory
   */
  exports.prototype['trackInventory'] = undefined;
  /**
   * @member {Boolean} stockReturnUnsellable
   */
  exports.prototype['stockReturnUnsellable'] = undefined;


  /**
   * Allowed values for the <code>packagingUnit</code> property.
   * @enum {String}
   * @readonly
   */
  exports.PackagingUnitEnum = {
    /**
     * value: "CUBIC_INCH"
     * @const
     */
    "CUBIC_INCH": "CUBIC_INCH",
    /**
     * value: "CUBIC_METER"
     * @const
     */
    "CUBIC_METER": "CUBIC_METER",
    /**
     * value: "FLUID_OUNCE"
     * @const
     */
    "FLUID_OUNCE": "FLUID_OUNCE",
    /**
     * value: "GALLON_FL"
     * @const
     */
    "GALLON_FL": "GALLON_FL",
    /**
     * value: "GRAM"
     * @const
     */
    "GRAM": "GRAM",
    /**
     * value: "INCH"
     * @const
     */
    "INCH": "INCH",
    /**
     * value: "KILOGRAM"
     * @const
     */
    "KILOGRAM": "KILOGRAM",
    /**
     * value: "LITER"
     * @const
     */
    "LITER": "LITER",
    /**
     * value: "METER"
     * @const
     */
    "METER": "METER",
    /**
     * value: "MILLILITER"
     * @const
     */
    "MILLILITER": "MILLILITER",
    /**
     * value: "OUNCE"
     * @const
     */
    "OUNCE": "OUNCE",
    /**
     * value: "POUND"
     * @const
     */
    "POUND": "POUND",
    /**
     * value: "SQUARE_INCH"
     * @const
     */
    "SQUARE_INCH": "SQUARE_INCH",
    /**
     * value: "SQUARE_METER"
     * @const
     */
    "SQUARE_METER": "SQUARE_METER"  };

  /**
   * Allowed values for the <code>subproductPresentation</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SubproductPresentationEnum = {
    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",
    /**
     * value: "HIDE_ALL"
     * @const
     */
    "HIDE_ALL": "HIDE_ALL",
    /**
     * value: "HIDE_PRICES"
     * @const
     */
    "HIDE_PRICES": "HIDE_PRICES",
    /**
     * value: "HIDE_QUANTITIES"
     * @const
     */
    "HIDE_QUANTITIES": "HIDE_QUANTITIES"  };


  return exports;
}));


