/**
 * KORONA.cloud API v3
 * Our api provides access to our cloud services
 *
 * OpenAPI spec version: 3
 * Contact: support@combase.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddOrUpdateResult', 'model/BadRequestError', 'model/ForbiddenError', 'model/Inventory', 'model/InventoryList', 'model/InventoryListItem', 'model/MethodNotAllowedError', 'model/NotFoundError', 'model/ResultListInventory', 'model/ResultListInventoryList', 'model/ResultListInventoryListItem', 'model/TooManyRequestsError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddOrUpdateResult'), require('../model/BadRequestError'), require('../model/ForbiddenError'), require('../model/Inventory'), require('../model/InventoryList'), require('../model/InventoryListItem'), require('../model/MethodNotAllowedError'), require('../model/NotFoundError'), require('../model/ResultListInventory'), require('../model/ResultListInventoryList'), require('../model/ResultListInventoryListItem'), require('../model/TooManyRequestsError'));
  } else {
    // Browser globals (root is window)
    if (!root.KoronacloudApiV3) {
      root.KoronacloudApiV3 = {};
    }
    root.KoronacloudApiV3.InventoriesKORONARetailApi = factory(root.KoronacloudApiV3.ApiClient, root.KoronacloudApiV3.AddOrUpdateResult, root.KoronacloudApiV3.BadRequestError, root.KoronacloudApiV3.ForbiddenError, root.KoronacloudApiV3.Inventory, root.KoronacloudApiV3.InventoryList, root.KoronacloudApiV3.InventoryListItem, root.KoronacloudApiV3.MethodNotAllowedError, root.KoronacloudApiV3.NotFoundError, root.KoronacloudApiV3.ResultListInventory, root.KoronacloudApiV3.ResultListInventoryList, root.KoronacloudApiV3.ResultListInventoryListItem, root.KoronacloudApiV3.TooManyRequestsError);
  }
}(this, function(ApiClient, AddOrUpdateResult, BadRequestError, ForbiddenError, Inventory, InventoryList, InventoryListItem, MethodNotAllowedError, NotFoundError, ResultListInventory, ResultListInventoryList, ResultListInventoryListItem, TooManyRequestsError) {
  'use strict';

  /**
   * InventoriesKORONARetail service.
   * @module api/InventoriesKORONARetailApi
   * @version 3
   */

  /**
   * Constructs a new InventoriesKORONARetailApi. 
   * @alias module:api/InventoriesKORONARetailApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addInventories operation.
     * @callback module:api/InventoriesKORONARetailApi~addInventoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddOrUpdateResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a batch of new inventories
     * 
     * @param {String} accountId the account id
     * @param {Array.<module:model/Inventory>} body a array of new inventories
     * @param {module:api/InventoriesKORONARetailApi~addInventoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddOrUpdateResult>}
     */
    this.addInventories = function(accountId, body, callback) {
      var postBody = body;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling addInventories");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addInventories");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AddOrUpdateResult];

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addInventoryInventoryListItems operation.
     * @callback module:api/InventoriesKORONARetailApi~addInventoryInventoryListItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddOrUpdateResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds inventory list items
     * 
     * @param {String} accountId the account id
     * @param {String} inventoryIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} inventoryListIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {Array.<module:model/InventoryListItem>} body data to update
     * @param {module:api/InventoriesKORONARetailApi~addInventoryInventoryListItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddOrUpdateResult>}
     */
    this.addInventoryInventoryListItems = function(accountId, inventoryIdOrNumber, inventoryListIdOrNumber, body, callback) {
      var postBody = body;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling addInventoryInventoryListItems");
      }

      // verify the required parameter 'inventoryIdOrNumber' is set
      if (inventoryIdOrNumber === undefined || inventoryIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryIdOrNumber' when calling addInventoryInventoryListItems");
      }

      // verify the required parameter 'inventoryListIdOrNumber' is set
      if (inventoryListIdOrNumber === undefined || inventoryListIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryListIdOrNumber' when calling addInventoryInventoryListItems");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addInventoryInventoryListItems");
      }


      var pathParams = {
        'accountId': accountId,
        'inventoryIdOrNumber': inventoryIdOrNumber,
        'inventoryListIdOrNumber': inventoryListIdOrNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AddOrUpdateResult];

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}/items', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventory operation.
     * @callback module:api/InventoriesKORONARetailApi~deleteInventoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes the inventory; only possible if hasBookedReceipts&#x3D;false
     * 
     * @param {String} accountId the account id
     * @param {String} inventoryIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {module:api/InventoriesKORONARetailApi~deleteInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteInventory = function(accountId, inventoryIdOrNumber, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteInventory");
      }

      // verify the required parameter 'inventoryIdOrNumber' is set
      if (inventoryIdOrNumber === undefined || inventoryIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryIdOrNumber' when calling deleteInventory");
      }


      var pathParams = {
        'accountId': accountId,
        'inventoryIdOrNumber': inventoryIdOrNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories/{inventoryIdOrNumber}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInventoryInventoryListItem operation.
     * @callback module:api/InventoriesKORONARetailApi~deleteInventoryInventoryListItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes the inventory list item
     * 
     * @param {String} accountId the account id
     * @param {String} inventoryIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} inventoryListIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} productIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {module:api/InventoriesKORONARetailApi~deleteInventoryInventoryListItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteInventoryInventoryListItem = function(accountId, inventoryIdOrNumber, inventoryListIdOrNumber, productIdOrNumber, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteInventoryInventoryListItem");
      }

      // verify the required parameter 'inventoryIdOrNumber' is set
      if (inventoryIdOrNumber === undefined || inventoryIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryIdOrNumber' when calling deleteInventoryInventoryListItem");
      }

      // verify the required parameter 'inventoryListIdOrNumber' is set
      if (inventoryListIdOrNumber === undefined || inventoryListIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryListIdOrNumber' when calling deleteInventoryInventoryListItem");
      }

      // verify the required parameter 'productIdOrNumber' is set
      if (productIdOrNumber === undefined || productIdOrNumber === null) {
        throw new Error("Missing the required parameter 'productIdOrNumber' when calling deleteInventoryInventoryListItem");
      }


      var pathParams = {
        'accountId': accountId,
        'inventoryIdOrNumber': inventoryIdOrNumber,
        'inventoryListIdOrNumber': inventoryListIdOrNumber,
        'productIdOrNumber': productIdOrNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}/items/{productIdOrNumber}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventories operation.
     * @callback module:api/InventoriesKORONARetailApi~getInventoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultListInventory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists all inventories
     * 
     * @param {String} accountId the account id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page number of the page to fetch
     * @param {Number} opts.size amount of objects to return per page
     * @param {String} opts.sort attribute to sort by (multiple separated by comma; max. 5)
     * @param {Number} opts.revision last revision number, objects with a greater revision than this will be returned
     * @param {Boolean} opts.includeDeleted indicates deleted objects should be loaded or not (default: false)
     * @param {module:api/InventoriesKORONARetailApi~getInventoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultListInventory}
     */
    this.getInventories = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getInventories");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': opts['sort'],
        'revision': opts['revision'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResultListInventory;

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventory operation.
     * @callback module:api/InventoriesKORONARetailApi~getInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Inventory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists the inventory
     * 
     * @param {String} accountId the account id
     * @param {String} inventoryIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {module:api/InventoriesKORONARetailApi~getInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Inventory}
     */
    this.getInventory = function(accountId, inventoryIdOrNumber, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getInventory");
      }

      // verify the required parameter 'inventoryIdOrNumber' is set
      if (inventoryIdOrNumber === undefined || inventoryIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryIdOrNumber' when calling getInventory");
      }


      var pathParams = {
        'accountId': accountId,
        'inventoryIdOrNumber': inventoryIdOrNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Inventory;

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories/{inventoryIdOrNumber}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryInventoryList operation.
     * @callback module:api/InventoriesKORONARetailApi~getInventoryInventoryListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists the inventory list
     * 
     * @param {String} accountId the account id
     * @param {String} inventoryIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} inventoryListIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {module:api/InventoriesKORONARetailApi~getInventoryInventoryListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryList}
     */
    this.getInventoryInventoryList = function(accountId, inventoryIdOrNumber, inventoryListIdOrNumber, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getInventoryInventoryList");
      }

      // verify the required parameter 'inventoryIdOrNumber' is set
      if (inventoryIdOrNumber === undefined || inventoryIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryIdOrNumber' when calling getInventoryInventoryList");
      }

      // verify the required parameter 'inventoryListIdOrNumber' is set
      if (inventoryListIdOrNumber === undefined || inventoryListIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryListIdOrNumber' when calling getInventoryInventoryList");
      }


      var pathParams = {
        'accountId': accountId,
        'inventoryIdOrNumber': inventoryIdOrNumber,
        'inventoryListIdOrNumber': inventoryListIdOrNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InventoryList;

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryInventoryListItem operation.
     * @callback module:api/InventoriesKORONARetailApi~getInventoryInventoryListItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists the inventory list item with the specified product
     * 
     * @param {String} accountId the account id
     * @param {String} inventoryIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} inventoryListIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} productIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {module:api/InventoriesKORONARetailApi~getInventoryInventoryListItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryListItem}
     */
    this.getInventoryInventoryListItem = function(accountId, inventoryIdOrNumber, inventoryListIdOrNumber, productIdOrNumber, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getInventoryInventoryListItem");
      }

      // verify the required parameter 'inventoryIdOrNumber' is set
      if (inventoryIdOrNumber === undefined || inventoryIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryIdOrNumber' when calling getInventoryInventoryListItem");
      }

      // verify the required parameter 'inventoryListIdOrNumber' is set
      if (inventoryListIdOrNumber === undefined || inventoryListIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryListIdOrNumber' when calling getInventoryInventoryListItem");
      }

      // verify the required parameter 'productIdOrNumber' is set
      if (productIdOrNumber === undefined || productIdOrNumber === null) {
        throw new Error("Missing the required parameter 'productIdOrNumber' when calling getInventoryInventoryListItem");
      }


      var pathParams = {
        'accountId': accountId,
        'inventoryIdOrNumber': inventoryIdOrNumber,
        'inventoryListIdOrNumber': inventoryListIdOrNumber,
        'productIdOrNumber': productIdOrNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InventoryListItem;

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}/items/{productIdOrNumber}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryInventoryListItems operation.
     * @callback module:api/InventoriesKORONARetailApi~getInventoryInventoryListItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultListInventoryListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists all inventory list items
     * 
     * @param {String} accountId the account id
     * @param {String} inventoryIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} inventoryListIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page number of the page to fetch
     * @param {Number} opts.size amount of objects to return per page
     * @param {String} opts.sort attribute to sort by (multiple separated by comma; max. 5)
     * @param {Number} opts.revision last revision number, objects with a greater revision than this will be returned
     * @param {module:api/InventoriesKORONARetailApi~getInventoryInventoryListItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultListInventoryListItem}
     */
    this.getInventoryInventoryListItems = function(accountId, inventoryIdOrNumber, inventoryListIdOrNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getInventoryInventoryListItems");
      }

      // verify the required parameter 'inventoryIdOrNumber' is set
      if (inventoryIdOrNumber === undefined || inventoryIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryIdOrNumber' when calling getInventoryInventoryListItems");
      }

      // verify the required parameter 'inventoryListIdOrNumber' is set
      if (inventoryListIdOrNumber === undefined || inventoryListIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryListIdOrNumber' when calling getInventoryInventoryListItems");
      }


      var pathParams = {
        'accountId': accountId,
        'inventoryIdOrNumber': inventoryIdOrNumber,
        'inventoryListIdOrNumber': inventoryListIdOrNumber
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': opts['sort'],
        'revision': opts['revision'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResultListInventoryListItem;

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}/items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryInventoryLists operation.
     * @callback module:api/InventoriesKORONARetailApi~getInventoryInventoryListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultListInventoryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists all inventory lists
     * 
     * @param {String} accountId the account id
     * @param {String} inventoryIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page number of the page to fetch
     * @param {Number} opts.size amount of objects to return per page
     * @param {String} opts.sort attribute to sort by (multiple separated by comma; max. 5)
     * @param {Number} opts.revision last revision number, objects with a greater revision than this will be returned
     * @param {Boolean} opts.includeDeleted indicates deleted objects should be loaded or not (default: false)
     * @param {module:model/String} opts.bookingStatus booking status (possible values: BOOKED, IN_PROGRESS)
     * @param {module:api/InventoriesKORONARetailApi~getInventoryInventoryListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultListInventoryList}
     */
    this.getInventoryInventoryLists = function(accountId, inventoryIdOrNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getInventoryInventoryLists");
      }

      // verify the required parameter 'inventoryIdOrNumber' is set
      if (inventoryIdOrNumber === undefined || inventoryIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryIdOrNumber' when calling getInventoryInventoryLists");
      }


      var pathParams = {
        'accountId': accountId,
        'inventoryIdOrNumber': inventoryIdOrNumber
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': opts['sort'],
        'revision': opts['revision'],
        'includeDeleted': opts['includeDeleted'],
        'bookingStatus': opts['bookingStatus'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResultListInventoryList;

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories/{inventoryIdOrNumber}/inventoryLists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInventory operation.
     * @callback module:api/InventoriesKORONARetailApi~updateInventoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * changes the inventory
     * 
     * @param {String} accountId the account id
     * @param {String} inventoryIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {module:model/Inventory} body the properties to update of the inventory
     * @param {module:api/InventoriesKORONARetailApi~updateInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateInventory = function(accountId, inventoryIdOrNumber, body, callback) {
      var postBody = body;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateInventory");
      }

      // verify the required parameter 'inventoryIdOrNumber' is set
      if (inventoryIdOrNumber === undefined || inventoryIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryIdOrNumber' when calling updateInventory");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInventory");
      }


      var pathParams = {
        'accountId': accountId,
        'inventoryIdOrNumber': inventoryIdOrNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories/{inventoryIdOrNumber}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInventoryInventoryList operation.
     * @callback module:api/InventoriesKORONARetailApi~updateInventoryInventoryListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates the inventory list
     * 
     * @param {String} accountId the account id
     * @param {String} inventoryIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} inventoryListIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {module:model/InventoryList} body data to update
     * @param {module:api/InventoriesKORONARetailApi~updateInventoryInventoryListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateInventoryInventoryList = function(accountId, inventoryIdOrNumber, inventoryListIdOrNumber, body, callback) {
      var postBody = body;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateInventoryInventoryList");
      }

      // verify the required parameter 'inventoryIdOrNumber' is set
      if (inventoryIdOrNumber === undefined || inventoryIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryIdOrNumber' when calling updateInventoryInventoryList");
      }

      // verify the required parameter 'inventoryListIdOrNumber' is set
      if (inventoryListIdOrNumber === undefined || inventoryListIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryListIdOrNumber' when calling updateInventoryInventoryList");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInventoryInventoryList");
      }


      var pathParams = {
        'accountId': accountId,
        'inventoryIdOrNumber': inventoryIdOrNumber,
        'inventoryListIdOrNumber': inventoryListIdOrNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInventoryInventoryListItem operation.
     * @callback module:api/InventoriesKORONARetailApi~updateInventoryInventoryListItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates the inventory list item
     * 
     * @param {String} accountId the account id
     * @param {String} inventoryIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} inventoryListIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} productIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {module:model/InventoryListItem} body data to update
     * @param {module:api/InventoriesKORONARetailApi~updateInventoryInventoryListItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateInventoryInventoryListItem = function(accountId, inventoryIdOrNumber, inventoryListIdOrNumber, productIdOrNumber, body, callback) {
      var postBody = body;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateInventoryInventoryListItem");
      }

      // verify the required parameter 'inventoryIdOrNumber' is set
      if (inventoryIdOrNumber === undefined || inventoryIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryIdOrNumber' when calling updateInventoryInventoryListItem");
      }

      // verify the required parameter 'inventoryListIdOrNumber' is set
      if (inventoryListIdOrNumber === undefined || inventoryListIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryListIdOrNumber' when calling updateInventoryInventoryListItem");
      }

      // verify the required parameter 'productIdOrNumber' is set
      if (productIdOrNumber === undefined || productIdOrNumber === null) {
        throw new Error("Missing the required parameter 'productIdOrNumber' when calling updateInventoryInventoryListItem");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInventoryInventoryListItem");
      }


      var pathParams = {
        'accountId': accountId,
        'inventoryIdOrNumber': inventoryIdOrNumber,
        'inventoryListIdOrNumber': inventoryListIdOrNumber,
        'productIdOrNumber': productIdOrNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}/items/{productIdOrNumber}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInventoryInventoryListItems operation.
     * @callback module:api/InventoriesKORONARetailApi~updateInventoryInventoryListItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddOrUpdateResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates inventory list items (property [product] required))
     * 
     * @param {String} accountId the account id
     * @param {String} inventoryIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} inventoryListIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {Array.<module:model/InventoryListItem>} body a array of inventory list items to update
     * @param {module:api/InventoriesKORONARetailApi~updateInventoryInventoryListItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddOrUpdateResult>}
     */
    this.updateInventoryInventoryListItems = function(accountId, inventoryIdOrNumber, inventoryListIdOrNumber, body, callback) {
      var postBody = body;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateInventoryInventoryListItems");
      }

      // verify the required parameter 'inventoryIdOrNumber' is set
      if (inventoryIdOrNumber === undefined || inventoryIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryIdOrNumber' when calling updateInventoryInventoryListItems");
      }

      // verify the required parameter 'inventoryListIdOrNumber' is set
      if (inventoryListIdOrNumber === undefined || inventoryListIdOrNumber === null) {
        throw new Error("Missing the required parameter 'inventoryListIdOrNumber' when calling updateInventoryInventoryListItems");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInventoryInventoryListItems");
      }


      var pathParams = {
        'accountId': accountId,
        'inventoryIdOrNumber': inventoryIdOrNumber,
        'inventoryListIdOrNumber': inventoryListIdOrNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AddOrUpdateResult];

      return this.apiClient.callApi(
        '/accounts/{accountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}/items', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
