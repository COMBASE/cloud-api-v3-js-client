/**
 * KORONA.cloud API v3
 * Our api provides access to our cloud services
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadRequestError', 'model/ForbiddenError', 'model/NotFoundError', 'model/Receipt', 'model/ResultListReceipt', 'model/TooManyRequestsError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadRequestError'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/Receipt'), require('../model/ResultListReceipt'), require('../model/TooManyRequestsError'));
  } else {
    // Browser globals (root is window)
    if (!root.KoronacloudApiV3) {
      root.KoronacloudApiV3 = {};
    }
    root.KoronacloudApiV3.ReceiptsApi = factory(root.KoronacloudApiV3.ApiClient, root.KoronacloudApiV3.BadRequestError, root.KoronacloudApiV3.ForbiddenError, root.KoronacloudApiV3.NotFoundError, root.KoronacloudApiV3.Receipt, root.KoronacloudApiV3.ResultListReceipt, root.KoronacloudApiV3.TooManyRequestsError);
  }
}(this, function(ApiClient, BadRequestError, ForbiddenError, NotFoundError, Receipt, ResultListReceipt, TooManyRequestsError) {
  'use strict';

  /**
   * Receipts service.
   * @module api/ReceiptsApi
   * @version 3.0.0
   */

  /**
   * Constructs a new ReceiptsApi. 
   * @alias module:api/ReceiptsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getReceipt operation.
     * @callback module:api/ReceiptsApi~getReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Receipt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists a single receipt
     * 
     * @param {String} koronaAccountId the account id
     * @param {String} receiptId the id of the receipt
     * @param {module:api/ReceiptsApi~getReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Receipt}
     */
    this.getReceipt = function(koronaAccountId, receiptId, callback) {
      var postBody = null;

      // verify the required parameter 'koronaAccountId' is set
      if (koronaAccountId === undefined || koronaAccountId === null) {
        throw new Error("Missing the required parameter 'koronaAccountId' when calling getReceipt");
      }

      // verify the required parameter 'receiptId' is set
      if (receiptId === undefined || receiptId === null) {
        throw new Error("Missing the required parameter 'receiptId' when calling getReceipt");
      }


      var pathParams = {
        'koronaAccountId': koronaAccountId,
        'receiptId': receiptId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Receipt;

      return this.apiClient.callApi(
        '/accounts/{koronaAccountId}/receipts/{receiptId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceipts operation.
     * @callback module:api/ReceiptsApi~getReceiptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultListReceipt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists all receipts
     * 
     * @param {String} koronaAccountId the account id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page number of the page to fetch
     * @param {Number} opts.size amount of objects to return per page
     * @param {String} opts.sort attribute to sort by (multiple separated by comma; max. 5)
     * @param {Number} opts.revision last revision number, objects with a greater revision than this will be returned
     * @param {String} opts.pointOfSale point of sale
     * @param {String} opts.organizationalUnit organizational unit
     * @param {Number} opts.zCount z-count of the receipt
     * @param {Date} opts.minCreateTime min (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
     * @param {Date} opts.maxCreateTime max (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
     * @param {module:api/ReceiptsApi~getReceiptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultListReceipt}
     */
    this.getReceipts = function(koronaAccountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'koronaAccountId' is set
      if (koronaAccountId === undefined || koronaAccountId === null) {
        throw new Error("Missing the required parameter 'koronaAccountId' when calling getReceipts");
      }


      var pathParams = {
        'koronaAccountId': koronaAccountId
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': opts['sort'],
        'revision': opts['revision'],
        'pointOfSale': opts['pointOfSale'],
        'organizationalUnit': opts['organizationalUnit'],
        'zCount': opts['zCount'],
        'minCreateTime': opts['minCreateTime'],
        'maxCreateTime': opts['maxCreateTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResultListReceipt;

      return this.apiClient.callApi(
        '/accounts/{koronaAccountId}/receipts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
