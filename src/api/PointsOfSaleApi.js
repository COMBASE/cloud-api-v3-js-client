/**
 * KORONA.cloud API v3
 * Our api provides access to our cloud services
 *
 * OpenAPI spec version: 3
 * Contact: support@combase.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddOrUpdateResult', 'model/BadRequestError', 'model/EndOfDayStatement', 'model/ForbiddenError', 'model/NotFoundError', 'model/Pos', 'model/Receipt', 'model/ResultListEndOfDayStatement', 'model/ResultListPos', 'model/ResultListReceipt', 'model/TooManyRequestsError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddOrUpdateResult'), require('../model/BadRequestError'), require('../model/EndOfDayStatement'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/Pos'), require('../model/Receipt'), require('../model/ResultListEndOfDayStatement'), require('../model/ResultListPos'), require('../model/ResultListReceipt'), require('../model/TooManyRequestsError'));
  } else {
    // Browser globals (root is window)
    if (!root.KoronacloudApiV3) {
      root.KoronacloudApiV3 = {};
    }
    root.KoronacloudApiV3.PointsOfSaleApi = factory(root.KoronacloudApiV3.ApiClient, root.KoronacloudApiV3.AddOrUpdateResult, root.KoronacloudApiV3.BadRequestError, root.KoronacloudApiV3.EndOfDayStatement, root.KoronacloudApiV3.ForbiddenError, root.KoronacloudApiV3.NotFoundError, root.KoronacloudApiV3.Pos, root.KoronacloudApiV3.Receipt, root.KoronacloudApiV3.ResultListEndOfDayStatement, root.KoronacloudApiV3.ResultListPos, root.KoronacloudApiV3.ResultListReceipt, root.KoronacloudApiV3.TooManyRequestsError);
  }
}(this, function(ApiClient, AddOrUpdateResult, BadRequestError, EndOfDayStatement, ForbiddenError, NotFoundError, Pos, Receipt, ResultListEndOfDayStatement, ResultListPos, ResultListReceipt, TooManyRequestsError) {
  'use strict';

  /**
   * PointsOfSale service.
   * @module api/PointsOfSaleApi
   * @version 3
   */

  /**
   * Constructs a new PointsOfSaleApi. 
   * @alias module:api/PointsOfSaleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPointOfSaleEndOfDayStatements operation.
     * @callback module:api/PointsOfSaleApi~addPointOfSaleEndOfDayStatementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddOrUpdateResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a batch of point of sale-related end-of-day-statements
     * 
     * @param {String} accountId the account id
     * @param {String} pointOfSaleIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} couplingId the coupling-id of the device
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/EndOfDayStatement>} opts.body the end-of-day-statements to add
     * @param {module:api/PointsOfSaleApi~addPointOfSaleEndOfDayStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddOrUpdateResult>}
     */
    this.addPointOfSaleEndOfDayStatements = function(accountId, pointOfSaleIdOrNumber, couplingId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling addPointOfSaleEndOfDayStatements");
      }

      // verify the required parameter 'pointOfSaleIdOrNumber' is set
      if (pointOfSaleIdOrNumber === undefined || pointOfSaleIdOrNumber === null) {
        throw new Error("Missing the required parameter 'pointOfSaleIdOrNumber' when calling addPointOfSaleEndOfDayStatements");
      }

      // verify the required parameter 'couplingId' is set
      if (couplingId === undefined || couplingId === null) {
        throw new Error("Missing the required parameter 'couplingId' when calling addPointOfSaleEndOfDayStatements");
      }


      var pathParams = {
        'accountId': accountId,
        'pointOfSaleIdOrNumber': pointOfSaleIdOrNumber
      };
      var queryParams = {
        'couplingId': couplingId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AddOrUpdateResult];

      return this.apiClient.callApi(
        '/accounts/{accountId}/pointsOfSale/{pointOfSaleIdOrNumber}/endOfDayStatements', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPointOfSaleReceipts operation.
     * @callback module:api/PointsOfSaleApi~addPointOfSaleReceiptsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddOrUpdateResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a batch of point of sale-related receipts
     * 
     * @param {String} accountId the account id
     * @param {String} pointOfSaleIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} couplingId the coupling-id of the device
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Receipt>} opts.body the receipts to add
     * @param {module:api/PointsOfSaleApi~addPointOfSaleReceiptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddOrUpdateResult>}
     */
    this.addPointOfSaleReceipts = function(accountId, pointOfSaleIdOrNumber, couplingId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling addPointOfSaleReceipts");
      }

      // verify the required parameter 'pointOfSaleIdOrNumber' is set
      if (pointOfSaleIdOrNumber === undefined || pointOfSaleIdOrNumber === null) {
        throw new Error("Missing the required parameter 'pointOfSaleIdOrNumber' when calling addPointOfSaleReceipts");
      }

      // verify the required parameter 'couplingId' is set
      if (couplingId === undefined || couplingId === null) {
        throw new Error("Missing the required parameter 'couplingId' when calling addPointOfSaleReceipts");
      }


      var pathParams = {
        'accountId': accountId,
        'pointOfSaleIdOrNumber': pointOfSaleIdOrNumber
      };
      var queryParams = {
        'couplingId': couplingId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AddOrUpdateResult];

      return this.apiClient.callApi(
        '/accounts/{accountId}/pointsOfSale/{pointOfSaleIdOrNumber}/receipts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPointOfSale operation.
     * @callback module:api/PointsOfSaleApi~getPointOfSaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pos} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists the point of sale
     * 
     * @param {String} accountId the account id
     * @param {String} pointOfSaleIdOrNumber the number of the point of sale
     * @param {Object} opts Optional parameters
     * @param {String} opts.couplingId the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
     * @param {module:api/PointsOfSaleApi~getPointOfSaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pos}
     */
    this.getPointOfSale = function(accountId, pointOfSaleIdOrNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getPointOfSale");
      }

      // verify the required parameter 'pointOfSaleIdOrNumber' is set
      if (pointOfSaleIdOrNumber === undefined || pointOfSaleIdOrNumber === null) {
        throw new Error("Missing the required parameter 'pointOfSaleIdOrNumber' when calling getPointOfSale");
      }


      var pathParams = {
        'accountId': accountId,
        'pointOfSaleIdOrNumber': pointOfSaleIdOrNumber
      };
      var queryParams = {
        'couplingId': opts['couplingId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Pos;

      return this.apiClient.callApi(
        '/accounts/{accountId}/pointsOfSale/{pointOfSaleIdOrNumber}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPointOfSaleEndOfDayStatements operation.
     * @callback module:api/PointsOfSaleApi~getPointOfSaleEndOfDayStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultListEndOfDayStatement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists all point of sale-related end-of-day-statements
     * 
     * @param {String} accountId the account id
     * @param {String} pointOfSaleIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} couplingId the coupling-id of the device
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page number of the page to fetch
     * @param {Number} opts.size amount of objects to return per page
     * @param {String} opts.sort attribute to sort by (multiple separated by comma; max. 5)
     * @param {Number} opts.revision last revision number, objects with a greater revision than this will be returned
     * @param {module:api/PointsOfSaleApi~getPointOfSaleEndOfDayStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultListEndOfDayStatement}
     */
    this.getPointOfSaleEndOfDayStatements = function(accountId, pointOfSaleIdOrNumber, couplingId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getPointOfSaleEndOfDayStatements");
      }

      // verify the required parameter 'pointOfSaleIdOrNumber' is set
      if (pointOfSaleIdOrNumber === undefined || pointOfSaleIdOrNumber === null) {
        throw new Error("Missing the required parameter 'pointOfSaleIdOrNumber' when calling getPointOfSaleEndOfDayStatements");
      }

      // verify the required parameter 'couplingId' is set
      if (couplingId === undefined || couplingId === null) {
        throw new Error("Missing the required parameter 'couplingId' when calling getPointOfSaleEndOfDayStatements");
      }


      var pathParams = {
        'accountId': accountId,
        'pointOfSaleIdOrNumber': pointOfSaleIdOrNumber
      };
      var queryParams = {
        'couplingId': couplingId,
        'page': opts['page'],
        'size': opts['size'],
        'sort': opts['sort'],
        'revision': opts['revision'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResultListEndOfDayStatement;

      return this.apiClient.callApi(
        '/accounts/{accountId}/pointsOfSale/{pointOfSaleIdOrNumber}/endOfDayStatements', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPointOfSaleReceipt operation.
     * @callback module:api/PointsOfSaleApi~getPointOfSaleReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Receipt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists a single point of sale-related receipt
     * 
     * @param {String} accountId the account id
     * @param {String} pointOfSaleIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {String} receiptId the id of the receipt
     * @param {Object} opts Optional parameters
     * @param {String} opts.couplingId the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
     * @param {module:api/PointsOfSaleApi~getPointOfSaleReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Receipt}
     */
    this.getPointOfSaleReceipt = function(accountId, pointOfSaleIdOrNumber, receiptId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getPointOfSaleReceipt");
      }

      // verify the required parameter 'pointOfSaleIdOrNumber' is set
      if (pointOfSaleIdOrNumber === undefined || pointOfSaleIdOrNumber === null) {
        throw new Error("Missing the required parameter 'pointOfSaleIdOrNumber' when calling getPointOfSaleReceipt");
      }

      // verify the required parameter 'receiptId' is set
      if (receiptId === undefined || receiptId === null) {
        throw new Error("Missing the required parameter 'receiptId' when calling getPointOfSaleReceipt");
      }


      var pathParams = {
        'accountId': accountId,
        'pointOfSaleIdOrNumber': pointOfSaleIdOrNumber,
        'receiptId': receiptId
      };
      var queryParams = {
        'couplingId': opts['couplingId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Receipt;

      return this.apiClient.callApi(
        '/accounts/{accountId}/pointsOfSale/{pointOfSaleIdOrNumber}/receipts/{receiptId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPointOfSaleReceipts operation.
     * @callback module:api/PointsOfSaleApi~getPointOfSaleReceiptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultListReceipt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists all point of sale-related receipts
     * 
     * @param {String} accountId the account id
     * @param {String} pointOfSaleIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {Object} opts Optional parameters
     * @param {String} opts.couplingId the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
     * @param {Number} opts.page number of the page to fetch
     * @param {Number} opts.size amount of objects to return per page
     * @param {String} opts.sort attribute to sort by (multiple separated by comma; max. 5)
     * @param {Number} opts.revision last revision number, objects with a greater revision than this will be returned
     * @param {Number} opts.zCount z-count of the receipt
     * @param {Date} opts.minCreateTime min (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
     * @param {Date} opts.maxCreateTime max (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
     * @param {module:api/PointsOfSaleApi~getPointOfSaleReceiptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultListReceipt}
     */
    this.getPointOfSaleReceipts = function(accountId, pointOfSaleIdOrNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getPointOfSaleReceipts");
      }

      // verify the required parameter 'pointOfSaleIdOrNumber' is set
      if (pointOfSaleIdOrNumber === undefined || pointOfSaleIdOrNumber === null) {
        throw new Error("Missing the required parameter 'pointOfSaleIdOrNumber' when calling getPointOfSaleReceipts");
      }


      var pathParams = {
        'accountId': accountId,
        'pointOfSaleIdOrNumber': pointOfSaleIdOrNumber
      };
      var queryParams = {
        'couplingId': opts['couplingId'],
        'page': opts['page'],
        'size': opts['size'],
        'sort': opts['sort'],
        'revision': opts['revision'],
        'zCount': opts['zCount'],
        'minCreateTime': opts['minCreateTime'],
        'maxCreateTime': opts['maxCreateTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResultListReceipt;

      return this.apiClient.callApi(
        '/accounts/{accountId}/pointsOfSale/{pointOfSaleIdOrNumber}/receipts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPointsOfSale operation.
     * @callback module:api/PointsOfSaleApi~getPointsOfSaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultListPos} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists all point of sales
     * 
     * @param {String} accountId the account id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page number of the page to fetch
     * @param {Number} opts.size amount of objects to return per page
     * @param {String} opts.sort attribute to sort by (multiple separated by comma; max. 5)
     * @param {Number} opts.revision last revision number, objects with a greater revision than this will be returned
     * @param {Boolean} opts.includeDeleted indicates deleted objects should be loaded or not (default: false)
     * @param {module:api/PointsOfSaleApi~getPointsOfSaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultListPos}
     */
    this.getPointsOfSale = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getPointsOfSale");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': opts['sort'],
        'revision': opts['revision'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResultListPos;

      return this.apiClient.callApi(
        '/accounts/{accountId}/pointsOfSale', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePointOfSale operation.
     * @callback module:api/PointsOfSaleApi~updatePointOfSaleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates a point of sale (works only for coupling (attribute &#39;couplingId&#39;) or updating device information (attribute &#39;deviceInformation&#39;))
     * 
     * @param {String} accountId the account id
     * @param {String} pointOfSaleIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {module:model/Pos} body the properties to update of the point of sale (&#39;couplingId&#39; only)
     * @param {Object} opts Optional parameters
     * @param {String} opts.couplingId the coupling-id of the device (required if already coupled)
     * @param {Boolean} opts.decouple executes uncoupling, if set to true, device will be uncoupled if point of sale is already coupled
     * @param {module:api/PointsOfSaleApi~updatePointOfSaleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePointOfSale = function(accountId, pointOfSaleIdOrNumber, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updatePointOfSale");
      }

      // verify the required parameter 'pointOfSaleIdOrNumber' is set
      if (pointOfSaleIdOrNumber === undefined || pointOfSaleIdOrNumber === null) {
        throw new Error("Missing the required parameter 'pointOfSaleIdOrNumber' when calling updatePointOfSale");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePointOfSale");
      }


      var pathParams = {
        'accountId': accountId,
        'pointOfSaleIdOrNumber': pointOfSaleIdOrNumber
      };
      var queryParams = {
        'couplingId': opts['couplingId'],
        'decouple': opts['decouple'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/{accountId}/pointsOfSale/{pointOfSaleIdOrNumber}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
