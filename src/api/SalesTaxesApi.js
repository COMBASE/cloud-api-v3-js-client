/**
 * KORONA.cloud API v3
 * Our api provides access to our cloud services
 *
 * OpenAPI spec version: 3
 * Contact: support@combase.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadRequestError', 'model/ForbiddenError', 'model/NotFoundError', 'model/ResultListSalesTax', 'model/SalesTax', 'model/TooManyRequestsError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadRequestError'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/ResultListSalesTax'), require('../model/SalesTax'), require('../model/TooManyRequestsError'));
  } else {
    // Browser globals (root is window)
    if (!root.KoronacloudApiV3) {
      root.KoronacloudApiV3 = {};
    }
    root.KoronacloudApiV3.SalesTaxesApi = factory(root.KoronacloudApiV3.ApiClient, root.KoronacloudApiV3.BadRequestError, root.KoronacloudApiV3.ForbiddenError, root.KoronacloudApiV3.NotFoundError, root.KoronacloudApiV3.ResultListSalesTax, root.KoronacloudApiV3.SalesTax, root.KoronacloudApiV3.TooManyRequestsError);
  }
}(this, function(ApiClient, BadRequestError, ForbiddenError, NotFoundError, ResultListSalesTax, SalesTax, TooManyRequestsError) {
  'use strict';

  /**
   * SalesTaxes service.
   * @module api/SalesTaxesApi
   * @version 3
   */

  /**
   * Constructs a new SalesTaxesApi. 
   * @alias module:api/SalesTaxesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getSalesTax operation.
     * @callback module:api/SalesTaxesApi~getSalesTaxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SalesTax} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists the sales tax
     * 
     * @param {String} accountId the account id
     * @param {String} salesTaxIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {module:api/SalesTaxesApi~getSalesTaxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SalesTax}
     */
    this.getSalesTax = function(accountId, salesTaxIdOrNumber, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getSalesTax");
      }

      // verify the required parameter 'salesTaxIdOrNumber' is set
      if (salesTaxIdOrNumber === undefined || salesTaxIdOrNumber === null) {
        throw new Error("Missing the required parameter 'salesTaxIdOrNumber' when calling getSalesTax");
      }


      var pathParams = {
        'accountId': accountId,
        'salesTaxIdOrNumber': salesTaxIdOrNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SalesTax;

      return this.apiClient.callApi(
        '/accounts/{accountId}/salesTaxes/{salesTaxIdOrNumber}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesTaxes operation.
     * @callback module:api/SalesTaxesApi~getSalesTaxesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultListSalesTax} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists all sales taxes
     * 
     * @param {String} accountId the account id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page number of the page to fetch
     * @param {Number} opts.size amount of objects to return per page
     * @param {String} opts.sort attribute to sort by (multiple separated by comma; max. 5)
     * @param {Number} opts.revision last revision number, objects with a greater revision than this will be returned
     * @param {Boolean} opts.includeDeleted indicates deleted objects should be loaded or not (default: false)
     * @param {module:api/SalesTaxesApi~getSalesTaxesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultListSalesTax}
     */
    this.getSalesTaxes = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getSalesTaxes");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': opts['sort'],
        'revision': opts['revision'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResultListSalesTax;

      return this.apiClient.callApi(
        '/accounts/{accountId}/salesTaxes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
