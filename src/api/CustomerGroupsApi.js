/**
 * KORONA.cloud API v3
 * Our api provides access to our cloud services
 *
 * OpenAPI spec version: 3
 * Contact: support@combase.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadRequestError', 'model/CustomerGroup', 'model/ForbiddenError', 'model/NotFoundError', 'model/ResultListCustomerGroup', 'model/TooManyRequestsError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadRequestError'), require('../model/CustomerGroup'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/ResultListCustomerGroup'), require('../model/TooManyRequestsError'));
  } else {
    // Browser globals (root is window)
    if (!root.KoronacloudApiV3) {
      root.KoronacloudApiV3 = {};
    }
    root.KoronacloudApiV3.CustomerGroupsApi = factory(root.KoronacloudApiV3.ApiClient, root.KoronacloudApiV3.BadRequestError, root.KoronacloudApiV3.CustomerGroup, root.KoronacloudApiV3.ForbiddenError, root.KoronacloudApiV3.NotFoundError, root.KoronacloudApiV3.ResultListCustomerGroup, root.KoronacloudApiV3.TooManyRequestsError);
  }
}(this, function(ApiClient, BadRequestError, CustomerGroup, ForbiddenError, NotFoundError, ResultListCustomerGroup, TooManyRequestsError) {
  'use strict';

  /**
   * CustomerGroups service.
   * @module api/CustomerGroupsApi
   * @version 3
   */

  /**
   * Constructs a new CustomerGroupsApi. 
   * @alias module:api/CustomerGroupsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCustomerGroup operation.
     * @callback module:api/CustomerGroupsApi~getCustomerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists the customer group
     * 
     * @param {String} accountId the account id
     * @param {String} customerGroupIdOrNumber id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
     * @param {module:api/CustomerGroupsApi~getCustomerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerGroup}
     */
    this.getCustomerGroup = function(accountId, customerGroupIdOrNumber, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getCustomerGroup");
      }

      // verify the required parameter 'customerGroupIdOrNumber' is set
      if (customerGroupIdOrNumber === undefined || customerGroupIdOrNumber === null) {
        throw new Error("Missing the required parameter 'customerGroupIdOrNumber' when calling getCustomerGroup");
      }


      var pathParams = {
        'accountId': accountId,
        'customerGroupIdOrNumber': customerGroupIdOrNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerGroup;

      return this.apiClient.callApi(
        '/accounts/{accountId}/customerGroups/{customerGroupIdOrNumber}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerGroups operation.
     * @callback module:api/CustomerGroupsApi~getCustomerGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultListCustomerGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lists all customer groups
     * 
     * @param {String} accountId the account id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page number of the page to fetch
     * @param {Number} opts.size amount of objects to return per page
     * @param {String} opts.sort attribute to sort by (multiple separated by comma; max. 5)
     * @param {Number} opts.revision last revision number, objects with a greater revision than this will be returned
     * @param {Boolean} opts.includeDeleted indicates deleted objects should be loaded or not (default: false)
     * @param {module:api/CustomerGroupsApi~getCustomerGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultListCustomerGroup}
     */
    this.getCustomerGroups = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getCustomerGroups");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': opts['sort'],
        'revision': opts['revision'],
        'includeDeleted': opts['includeDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResultListCustomerGroup;

      return this.apiClient.callApi(
        '/accounts/{accountId}/customerGroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
